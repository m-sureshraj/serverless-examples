# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html
UserPool:
  Type: AWS::Cognito::UserPool
  # none of these properties are required
  Properties:
    UserPoolName: ${self:custom.appPrefix}-user-pool
    DeletionProtection: ACTIVE
    MfaConfiguration: OFF
    AccountRecoverySetting:
      RecoveryMechanisms:
       - Name: verified_email
         Priority: 1
    UsernameAttributes:
      - email
    AutoVerifiedAttributes:
      - email
    UserAttributeUpdateSettings:
      AttributesRequireVerificationBeforeUpdate:
        - email
    Schema:
      - Name: given_name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: family_name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: email
        AttributeDataType: String
        Mutable: true
        Required: true
      # The documentation states that custom attributes should be prefixed with 'custom:', but using it results in a double prefix, e.g., 'custom:custom:<name>'
      - Name: company
        AttributeDataType: String
        Required: false
        Mutable: true

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
UserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: ${self:custom.appPrefix}-user-pool-client
    UserPoolId: !Ref UserPool
    AccessTokenValidity: 1 # valid for 1 hour
    AllowedOAuthFlows:
      - code # should be exchanged for the access token
    AllowedOAuthFlowsUserPoolClient: true

    # email: grants access to the email and email_verified claims. Can only be requested with the openid scope.
    # profile: grants access to all user attributes that are readable by the client. Can only be requested with the openid scope.
    # openid: declares that you want to retrieve scopes that align with the OpenID Connect specification. Amazon Cognito doesn't return an ID token unless you request the openid scope.
    # aws.cognito.signin.user.admin: grants access to cognito api operation that required access token, such as UpdateUserAttributes
    AllowedOAuthScopes:
      - email
      - profile
      - openid
      - aws.cognito.signin.user.admin

    # todo: access dev url dynamically
    CallbackURLs:
      - http://localhost:3000/api/auth-callback # for dev
      - !Join ['', ['https://', !GetAtt CloudFrontDistribution.DomainName, '/api/auth-callback']]

    SupportedIdentityProviders:
      - COGNITO

    GenerateSecret: false
    PreventUserExistenceErrors: ENABLED
    EnableTokenRevocation: true

    ExplicitAuthFlows:
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH

# (hosted ui) https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooldomain.html
UserPoolDomain:
  Type: AWS::Cognito::UserPoolDomain
  Properties:
    UserPoolId: !Ref UserPool
    Domain: ${self:custom.cognitoUserPoolDomain}

# Host static assets on S3

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
StaticAssetsBucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: ${self:custom.appPrefix}-website-assets
    PublicAccessBlockConfiguration:
      # Enables public assess to the bucket.
      BlockPublicAcls: false
    WebsiteConfiguration:
      IndexDocument: 'index.html'
      ErrorDocument: 'index.html'

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html
BucketPolicy:
  Type: 'AWS::S3::BucketPolicy'
  Properties:
    Bucket: !Ref StaticAssetsBucket
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: 's3:GetObject'
          Resource: !Join ['', ['arn:aws:s3:::', !Ref StaticAssetsBucket, '/*']]

# CloudFront distribution

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html
CloudFrontDistribution:
  Type: 'AWS::CloudFront::Distribution'
  Properties:
    DistributionConfig:
      Enabled: true
      DefaultRootObject: 'index.html'
      PriceClass: 'PriceClass_100' # Use only North America and Europe region for the distribution (low price)
      Origins:
        # DomainName can't contain a ':' in it, so split it to get the url without http/https part
        - DomainName: !Select [1, !Split ["//", !GetAtt StaticAssetsBucket.WebsiteURL]]
          Id: 'static-assets-s3-bucket'
          OriginShield:
            Enabled: false # controls additional caching layer, no need for a demo application
          CustomOriginConfig:
            OriginProtocolPolicy: 'http-only'

        # `HttpApi` is the logical id of the api gateway resource that was created as part of Serverless framework
        - DomainName: !Join ['.', [!Ref HttpApi, 'execute-api', '${self:provider.region}', 'amazonaws.com']]
          Id: 'api-gateway'
          OriginShield:
            Enabled: false
          CustomOriginConfig:
            OriginProtocolPolicy: 'https-only'

      CacheBehaviors:
        # do not cache the request to the `api/*`
        - PathPattern: '/api/*'
          ViewerProtocolPolicy: 'redirect-to-https'
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          CachedMethods: [GET, HEAD]
          Compress: true
          # the target to which this cache behavior applies
          TargetOriginId: 'api-gateway'

          # id of the aws managed caching disabled policy (Managed-CachingDisabled). Recommended for api-gateway
          CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad'

          # managed origin request policy (Managed-AllViewerExceptHostHeader).
          # Policy to forward all parameters in viewer requests except for the Host header
          # recommended for api-gateway without custom domains
          OriginRequestPolicyId: 'b689b0a8-53d0-40ab-baf2-68738e2966ac'

        # do not cache the request to the `index.html`
        - PathPattern: '/index.html'
          ViewerProtocolPolicy: 'redirect-to-https'
          AllowedMethods: [GET, HEAD]
          TargetOriginId: 'static-assets-s3-bucket'
          Compress: true
          CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad'

      # path pattern can not be defined for the default cache behavior. It matches all requests.
      DefaultCacheBehavior:
        ViewerProtocolPolicy: 'redirect-to-https'
        AllowedMethods: [GET, HEAD]
        Compress: true
        TargetOriginId: 'static-assets-s3-bucket'

        # Managed-CachingOptimized policy id
        # Policy with caching enabled. Supports Gzip and Brotli compression
        CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
